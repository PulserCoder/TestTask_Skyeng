from typing import List

from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from jinja2 import Template

from loader import dp

themes = [
    '‚Äã‚Äã ùó•ùóîùó°ùóóùó¢ùó† ‚Äã‚Äã',
    '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –∂–∏–∑–Ω—å',
    '–ñ–∏–∑–Ω—å –≤ –≥–æ—Ä–æ–¥–µ –∏ —Å–µ–ª–µ',
    '–û–±—â–µ–Ω–∏–µ –≤ —à–∫–æ–ª–µ, —Å–µ–º—å–µ',
    '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∑–∞–±–æ—Ç–∞ –æ –Ω—ë–º',
    '–î–æ—Å—É–≥ –º–æ–ª–æ–¥–µ–∂–∏: –ø–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º',
    '–ü—Ä–∏—Ä–æ–¥–∞ –∏ –ø—Ä–æ–±–ª–µ–º—ã —ç–∫–æ–ª–æ–≥–∏–∏',
    '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
]

cd_walk = CallbackData("theme_choose", "c")
topic_cd = CallbackData("theme", "topic")


def get_options(c) -> List[InlineKeyboardButton]:
    if c == 0:
        return [InlineKeyboardButton(text=themes[i], callback_data=topic_cd.new(topic=themes[i][:10])) for i in range(5)]
    return [InlineKeyboardButton(text=themes[i], callback_data=topic_cd.new(topic=themes[i][:10])) for i in
            range(5, len(themes))]


def dynamic_markup(c):
    markup = InlineKeyboardMarkup()
    buttons = get_options(c)
    left = InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=cd_walk.new(c=c - 1))
    right = InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=cd_walk.new(c=c + 1))
    [markup.add(option) for option in buttons]
    markup.row(left, right)
    return markup


@dp.callback_query_handler(cd_walk.filter(), state='*')
async def get_theme(call: CallbackQuery, callback_data: dict):
    try:
        c = int(callback_data.get('c'))
        if c < 0:
            c = 1
        elif c > 1:
            c = 0
        template = Template(open('handlers/templates/choosing.html').read())
        await call.message.edit_text(text=template.render(),
                                     parse_mode='HTML',
                                     reply_markup=dynamic_markup(c))
    except Exception:
        raise


@dp.callback_query_handler(text='start_task')
async def start_training(call: CallbackQuery):
    template = Template(open('handlers/templates/choosing.html').read())
    await call.message.edit_text(text=template.render(),
                                 parse_mode='HTML',
                                 reply_markup=dynamic_markup(0))



